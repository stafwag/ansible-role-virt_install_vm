---
- name: Set virt_install_vm_installed to false
  ansible.builtin.set_fact:
    virt_install_vm_installed:
      true

- name: Display debug vars
  ansible.builtin.debug:
    msg:
      - "vm = {{ vm | default('not set (undefined)') }}"
      - "virt_install_vm = {{ virt_install_vm | default('not set (undefined)') }}"
  tags:
    - debug
    - never

- name: Detect if the vm is already defined
  block:
    - name: Get the vm status
      community.libvirt.virt:
        command: status
        name: "{{ vm.hostname }}"
      register:
        _vm_status
      ignore_errors: true
  rescue:
    - name: Display ok message
      ansible.builtin.debug:
        msg:
          - "Failed to get the vm status"
          - "Which is a good thing"

- name: Display the status
  ansible.builtin.debug:
    msg: "_vm_status: {{ _vm_status }}"
  tags:
    - debug
    - never

- name: Deploy the virtual machine
  when:
    - not virt_install_vm.skip_if_deployed|default(false) or
      _vm_status.status is not defined
  block:
    - name: Fail if the vm is already defined
      ansible.builtin.fail:
        msg:
          - "Sorry, {{ vm.hostname }} is already defined"
      when:
        - not _vm_status.failed
        - _vm_status.exception.msg | default("") is not regex(".*not found.*")

    - name: "Include role"
      ansible.builtin.include_role:
        name: "{{ myrole }}"
      loop:
        - stafwag.libvirt
        - stafwag.qemu_img
        - stafwag.cloud_localds
        - stafwag.virt_install_import
      loop_control:
        loop_var: myrole

    - name: Set virt_install_vm_installed to true
      ansible.builtin.set_fact:
        virt_install_vm_installed:
          true

- name: Display virt_install_vm_installed
  ansible.builtin.debug:
    msg:
      - "virt_install_vm_installed: {{ virt_install_vm_installed }}"
  tags:
    - never
    - debug
